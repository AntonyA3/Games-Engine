Sub Tasks
Reasoning a good folder structure

Summary
I need to store the C++ program, libraries and the programs assets in the windows file explorer, c++ header files are usually in a floder called include, assets are usually in a folder called, assets, external libraries are usually in a folder called vendors, and source code is usually in a folder called src

Analysis / Preconditions / Postcondition
Precondition: I do not have a c++ folder structure for this current Project, but I do have one for previous Projects

Post condition: I will have a folder structure that will be suitable for the project, until I start to find problems with it. I will then be able to use a makefile to build these files

Algorithms / Approach
Research
Canonic File Structure
Source: https://www.openstd.org/jtc1/sc22/wg21/docs/papers/2018/p1204r0.html#abstract#

Claims/Reasons
Goal is to 'create an ecosystem of C++ packages that can coexist, are easy to comprehend by both humans and tools, scale to complex, real-world requirements, and, last but not least, are pleasant to work with.'
There should be no seperation between /src and /include: It makes it easier to include files using .I in build systems
Use hpp and cpp for c++ files: .c and .h should only be used for regular c files
library names should begin with lib (optional due to pushback) or another sonsistent naming method: To make it clear with both humans and computers, and con coexist with the names of future executables
Modules should be in a group of it's header, it's souce file and it's unit test source file
Integration tests should be in a seperate test subdirectory: Since integration tests are usually sub projects, and many build systems require sub projects to be in a seperate directory.
In some headers need to be private, they should be placed in a private subdirectory
Pitchfork Project Convention

build: Build artifacts
daa: non source files
examples
external
extras
include: for public headers
libs
src: source files and private headers
tests
tools
Test Design / Psuedo Implementation / Mathmatical Model
Intuitive
Project Folder
include folder
src folder
vendor folder
assets folder
-My Ideal design
- Engine Project Folder 'Games-Engine'
- include
- docs
- src
- Breakout
- docs
- src
- header_file.hpp
- source_file.cpp
- test_file.test.cpp
- data
- tests
- vendors
- gui-library
- tests
- test-name
- test_main.cpp
- data
- shaders
- images
- models
- tools : development- tools
- level-editor

Test Design
By monitoring: I should be able to evaluate
whether, there is an inconsistency that can lead to problems like 2 object files having the same name in build
It takes longer to refactor code as the code base scales
Task Evaluation
This task is done, in terms of that I have successfully created a basis for the file structure for my project.
If I need to deviate from this structure I should add a rule that requires me to create a new task if the file structure needs to be changed in a way that would affect multiple modules


